#include<stdio.h>
void insert(int heap[], int size, int item, int *insertion_comp)
{
    int temp, ptr=size, par=size;
    
    heap[size] = item;
    
    while(par > 1)
    {
        par = (int)ptr/2;
        if(heap[par] < heap[ptr])
        {
            *insertion_comp = *insertion_comp + 1;
            temp =  heap[par];
            heap[par] = heap[ptr];
            heap[ptr] = temp;
        }
        ptr = par;
    }
}
void delete(int heap[], int size, int *deletion_comp)
{
    int left=2, right=3, ptr=1, par=1;
    int temp;
    
    
    printf("%d ",heap[1]);
    heap[1] = heap[size];
    while(right<=size)
    {
        if(heap[right] > heap[left])
        {ptr=right; *deletion_comp = *deletion_comp + 1;}
        else
        {ptr=left; *deletion_comp = *deletion_comp + 1;}
        if(heap[ptr] > heap[par])
        {
            *deletion_comp = *deletion_comp + 1;
            temp = heap[ptr];
            heap[ptr] = heap[par];
            heap[par] = temp;
        }
        par = ptr;
        left = 2*ptr; right = left + 1;
    }
    size = size - 1;
    if(size!=0)
    {
        delete(heap, size, deletion_comp); //it's already a address
    }
}
int main()
{
    int heap[10], item, i;
    int deletion_comp=0, insertion_comp=0;
    for(i=1; i<10; i++)
    {
        printf("Enter item: ");
        scanf("%d", &item);
        insert(heap, i, item, &insertion_comp);
    }
    printf("\nSoreted Heap tree\n");
    delete(heap, i-1, &deletion_comp);
    
    printf("\n\nTotal comparison in insertion: %d\nTotal comparison in insertion: %d\n", insertion_comp, deletion_comp);
    return 0;
}
